spring.application.name=RIBBON
server.port=8885
eureka.client.serviceUrl.defaultZone=http://localhost:8888/eureka/
#WeightedResponseTimeRule can user object created by myself
#client.namespace.key=xxxx
SERVICE-B.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
#com.netflix.loadbalancer.RoundRobinRule
#ribbon.eureka.enabled=false

#RandomRule：随机选择一个server
#BestAvailabl：选择一个最小的并发请求的server，逐个考察Server，如果Server被tripped了，则忽略
#RoundRobinRule：roundRobin方式轮询选择， 轮询index，选择index对应位置的server
#WeightedResponseTimeRule：根据响应时间分配一个weight(权重)，响应时间越长，weight越小，被选中的可能性越低
#RetryRule：对选定的负载均衡策略机上重试机制，在一个配置时间段内当选择server不成功，则一直尝试使用subRule的方式选择一个可用的server
#ZoneAvoidanceRule：复合判断server所在区域的性能和server的可用性选择server
#ResponseTimeWeightedRule：作用同WeightedResponseTimeRule，二者作用是一样的，ResponseTimeWeightedRule后来改名为WeightedResponseTimeRule